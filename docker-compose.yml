version: '3.8'

services:
  # Backend API
  vectorizer-api:
    build:
      context: .
      dockerfile: Dockerfile
    image: vectorizer/production:latest
    container_name: vectorizer-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=info
      - MAX_WORKERS=4
    volumes:
      - ./backend_processor/uploads:/app/backend_processor/uploads
      - ./backend_processor/outputs:/app/backend_processor/outputs
      - ./backend_processor/ai_models:/app/backend_processor/ai_models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - vectorizer-network
    labels:
      - "com.vectorizer.service=api"
      - "com.vectorizer.version=3.0.0"

  # Frontend (Nginx)
  vectorizer-frontend:
    image: nginx:alpine
    container_name: vectorizer-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./dist:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      vectorizer-api:
        condition: service_healthy
    networks:
      - vectorizer-network
    labels:
      - "com.vectorizer.service=frontend"

  # Redis (for caching and job queue)
  vectorizer-redis:
    image: redis:7-alpine
    container_name: vectorizer-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - vectorizer-network
    labels:
      - "com.vectorizer.service=cache"

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: vectorizer-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - vectorizer-network
    labels:
      - "com.vectorizer.service=monitoring"

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: vectorizer-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - vectorizer-network
    labels:
      - "com.vectorizer.service=monitoring"

networks:
  vectorizer-network:
    driver: bridge
    name: vectorizer-net

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
