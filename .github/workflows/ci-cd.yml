name: Vectorizer.dev CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  RUST_VERSION: 1.75.0
  PYTHON_VERSION: 3.12
  NODE_VERSION: 20

jobs:
  test-rust:
    name: Test Rust Core
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          profile: minimal
          override: true
          components: clippy, rustfmt
      
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            rust_core/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('rust_core/Cargo.lock') }}
      
      - name: Check formatting
        working-directory: rust_core
        run: cargo fmt -- --check
      
      - name: Lint with Clippy
        working-directory: rust_core
        run: cargo clippy -- -D warnings
      
      - name: Run Rust tests
        working-directory: rust_core
        run: cargo test --release
      
      - name: Build Rust core
        working-directory: rust_core
        run: cargo build --release

  test-backend:
    name: Test Python Backend
    runs-on: ubuntu-latest
    needs: test-rust
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install Rust (for maturin)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          profile: minimal
          override: true
      
      - name: Install dependencies
        working-directory: backend_processor
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Build Rust module
        working-directory: rust_core
        run: |
          pip install maturin
          maturin develop --release
      
      - name: Run Python tests
        working-directory: backend_processor
        run: |
          python test_vectorization.py
      
      - name: Generate coverage report
        working-directory: backend_processor
        run: |
          pytest --cov=. --cov-report=xml test_vectorization.py || true
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./backend_processor/coverage.xml
          flags: backend

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build frontend
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-dist
          path: dist/

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test-rust, test-backend, test-frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: vectorizer/production
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=sha,prefix={{branch}}-
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /opt/vectorizer
            docker-compose pull
            docker-compose up -d --remove-orphans
            docker system prune -f
      
      - name: Health check
        run: |
          sleep 10
          curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1
      
      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: 'Vectorizer.dev deployment to production: ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Rust security audit
        working-directory: rust_core
        run: |
          cargo install cargo-audit
          cargo audit
      
      - name: Python security check
        working-directory: backend_processor
        run: |
          pip install safety
          safety check --file requirements.txt || true
      
      - name: Node security audit
        run: npm audit --audit-level=moderate

  performance-benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [test-rust, test-backend]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          profile: minimal
      
      - name: Build and benchmark
        working-directory: backend_processor
        run: |
          pip install -r requirements.txt
          cd ../rust_core && pip install maturin && maturin develop --release
          cd ../backend_processor
          python benchmark_premium_features.py || true
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: backend_processor/benchmark_results.json
